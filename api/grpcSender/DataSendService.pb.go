// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DataSendService.proto

package grpcSender

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Enter struct {
	//The Ping message
	Message              []float32 `protobuf:"fixed32,1,rep,packed,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Enter) Reset()         { *m = Enter{} }
func (m *Enter) String() string { return proto.CompactTextString(m) }
func (*Enter) ProtoMessage()    {}
func (*Enter) Descriptor() ([]byte, []int) {
	return fileDescriptor_df875e890922d343, []int{0}
}

func (m *Enter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enter.Unmarshal(m, b)
}
func (m *Enter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enter.Marshal(b, m, deterministic)
}
func (m *Enter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enter.Merge(m, src)
}
func (m *Enter) XXX_Size() int {
	return xxx_messageInfo_Enter.Size(m)
}
func (m *Enter) XXX_DiscardUnknown() {
	xxx_messageInfo_Enter.DiscardUnknown(m)
}

var xxx_messageInfo_Enter proto.InternalMessageInfo

func (m *Enter) GetMessage() []float32 {
	if m != nil {
		return m.Message
	}
	return nil
}

type Out struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Out) Reset()         { *m = Out{} }
func (m *Out) String() string { return proto.CompactTextString(m) }
func (*Out) ProtoMessage()    {}
func (*Out) Descriptor() ([]byte, []int) {
	return fileDescriptor_df875e890922d343, []int{1}
}

func (m *Out) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Out.Unmarshal(m, b)
}
func (m *Out) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Out.Marshal(b, m, deterministic)
}
func (m *Out) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Out.Merge(m, src)
}
func (m *Out) XXX_Size() int {
	return xxx_messageInfo_Out.Size(m)
}
func (m *Out) XXX_DiscardUnknown() {
	xxx_messageInfo_Out.DiscardUnknown(m)
}

var xxx_messageInfo_Out proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Enter)(nil), "Enter")
	proto.RegisterType((*Out)(nil), "Out")
}

func init() {
	proto.RegisterFile("DataSendService.proto", fileDescriptor_df875e890922d343)
}

var fileDescriptor_df875e890922d343 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x75, 0x49, 0x2c, 0x49,
	0x0c, 0x4e, 0xcd, 0x4b, 0x09, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x57, 0x52, 0xe4, 0x62, 0x75, 0xcd, 0x2b, 0x49, 0x2d, 0x12, 0x92, 0xe0, 0x62, 0xcf, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd6, 0x60, 0x0a, 0x82, 0x71, 0x95, 0x58,
	0xb9, 0x98, 0xfd, 0x4b, 0x4b, 0x8c, 0xb4, 0xb9, 0xf8, 0x1c, 0xf3, 0x12, 0x73, 0x2a, 0x8b, 0x4b,
	0xa0, 0x26, 0x08, 0x49, 0x72, 0xb1, 0x43, 0x44, 0x52, 0x85, 0xd8, 0xf4, 0xc0, 0xa6, 0x48, 0xb1,
	0xe8, 0xf9, 0x97, 0x96, 0x28, 0x31, 0x38, 0xf1, 0x44, 0x71, 0xa5, 0x17, 0x15, 0x24, 0x83, 0xec,
	0x4b, 0x2d, 0x4a, 0x62, 0x03, 0xdb, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xe0, 0xe4,
	0xef, 0x84, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalystServiceClient is the client API for AnalystService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalystServiceClient interface {
	//an example of getting a feature
	Analyse(ctx context.Context, in *Enter, opts ...grpc.CallOption) (*Out, error)
}

type analystServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalystServiceClient(cc grpc.ClientConnInterface) AnalystServiceClient {
	return &analystServiceClient{cc}
}

func (c *analystServiceClient) Analyse(ctx context.Context, in *Enter, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/AnalystService/Analyse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalystServiceServer is the server API for AnalystService service.
type AnalystServiceServer interface {
	//an example of getting a feature
	Analyse(context.Context, *Enter) (*Out, error)
}

// UnimplementedAnalystServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalystServiceServer struct {
}

func (*UnimplementedAnalystServiceServer) Analyse(ctx context.Context, req *Enter) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyse not implemented")
}

func RegisterAnalystServiceServer(s *grpc.Server, srv AnalystServiceServer) {
	s.RegisterService(&_AnalystService_serviceDesc, srv)
}

func _AnalystService_Analyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalystServiceServer).Analyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalystService/Analyse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalystServiceServer).Analyse(ctx, req.(*Enter))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalystService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AnalystService",
	HandlerType: (*AnalystServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyse",
			Handler:    _AnalystService_Analyse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DataSendService.proto",
}
