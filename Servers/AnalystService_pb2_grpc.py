# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import AnalystService_pb2 as AnalystService__pb2


class AnalystServiceStub(object):
  """python -m grpc_tools.protoc -I./protos --python_out=. --grpc_python_out=. ./protos/AnalystService.proto

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Analyse = channel.unary_unary(
        '/AnalystService/Analyse',
        request_serializer=AnalystService__pb2.Enter.SerializeToString,
        response_deserializer=AnalystService__pb2.Out.FromString,
        )


class AnalystServiceServicer(object):
  """python -m grpc_tools.protoc -I./protos --python_out=. --grpc_python_out=. ./protos/AnalystService.proto

  """

  def Analyse(self, request, context):
    """an example of getting a feature
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AnalystServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Analyse': grpc.unary_unary_rpc_method_handler(
          servicer.Analyse,
          request_deserializer=AnalystService__pb2.Enter.FromString,
          response_serializer=AnalystService__pb2.Out.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'AnalystService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
